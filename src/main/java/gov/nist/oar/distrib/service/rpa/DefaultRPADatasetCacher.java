package gov.nist.oar.distrib.service.rpa;

import gov.nist.oar.distrib.service.RPACachingService;
import gov.nist.oar.distrib.service.rpa.exceptions.RequestProcessingException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * An implementation of the {@link RPADatasetCacher} interface that uses {@link RPACachingService} to cache datasets.
 */
public class DefaultRPADatasetCacher implements RPADatasetCacher {

    private final static Logger LOGGER = LoggerFactory.getLogger(DefaultRPADatasetCacher.class);
    private final RPACachingService rpaCachingService;

    public DefaultRPADatasetCacher(RPACachingService rpaCachingService) {
        this.rpaCachingService = rpaCachingService;
    }

    /**
     * Caches the dataset with the given ID using the {@link RPACachingService}.
     *
     * @param datasetId the ID of the dataset to cache
     * @return a random ID generated by the RPA caching service to represent the cached dataset
     * @throws RequestProcessingException if an error occurs while caching the dataset
     */
    @Override
    public String cache(String datasetId) throws RequestProcessingException {
        String randomId;
        try {
            randomId = rpaCachingService.cacheAndGenerateRandomId(datasetId, "");
        } catch (Exception e) {
            this.logCachingException(e);
            throw new RequestProcessingException(e.getMessage());
        }
        return randomId;
    }

    /**
     * Logs the specified exception to the debug log, along with its stack trace.
     *
     * @param e the exception to log
     */
    private void logCachingException(Exception e) {
        LOGGER.error("Unexpected failure while caching RPA dataset: " + e);
        StringBuilder sb = new StringBuilder();
        for (StackTraceElement element : e.getStackTrace()) {
            sb.append(element.toString());
            sb.append("\n");
        }
        LOGGER.error(sb.toString());
    }

}